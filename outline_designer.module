<?php 
//ELMS: Outline Designer - Ajax book / general usability improvements for Drupal 5.x
//Copyright (C) 2008  The Pennsylvania State University
//
//Bryan Ollendyke
//bto108@psu.edu
//
//Keith D. Bailey
//kdb163@psu.edu
//
//12 Borland
//University Park, PA 16802
//
//This program is free software; you can redistribute it and/or modify
//it under the terms of the GNU General Public License as published by
//the Free Software Foundation; either version 2 of the License, or
//(at your option) any later version.
//
//This program is distributed in the hope that it will be useful,
//but WITHOUT ANY WARRANTY; without even the implied warranty of
//MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//GNU General Public License for more details.
//
//You should have received a copy of the GNU General Public License along
//with this program; if not, write to the Free Software Foundation, Inc.,
//51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

/**
* Implementation of hook_help
*/
function outline_designer_help($section) {
global $node;
  switch ($section) {
    case 'admin':
      return t("Outline Designer redoes how books / content is created system wide.");
    case 'nodeid':
    return $node->nid;
  }
}
/**
* Implementation of hook_perm
*/
function outline_designer_perm() {
  return array('access outline designer','drag-and-drop content','change content types','duplicate nodes');
}

/**
* Implementation of hook_block
*/
function outline_designer_block($op = 'list',$delta = 0, $edit = array()){
  switch($op){
    case 'list':
      $blocks[0]['info'] = t("Outline Designer");
      return $blocks;
    break;
    case 'view':
      $output = '';
      switch($delta){
        case 0:
        $block['subject'] = t("Outline Designer");
        $block['content'] = '<ul><li class="leaf">' . l(t('Outline Designer'),'outline_designer') . '</li>';
        $block['content'] .= '<li class="leaf">' . l(t('Settings'),'admin/settings/outline_designer') . '</li></ul>';
        break;
      }
    break;
  }
  return $block;
}

/**
* Implementation of hook_menu
*/
function outline_designer_menu($may_cache) {
  $items = array();
  $items[] = array('path' => 'outline_designer',
      'title' => t('Outline Designer'),
      'description' => t('The Outline Designers Outline allows you to quickly (re)structure your entire website.'),
      'callback' => '_outline_designer_outline',
    'access' => user_access('access outline designer'));
  
  $items[] = array('path' => 'admin/settings/outline_designer',
      'title' => t('Outline Designer'),
      'description' => t('The Outline Designer settings allow you to define what content types can be created quickly as well as associating icons to content types.'),
      'callback' => 'drupal_get_form',
      'callback arguments' => 'outline_designer_settings',
      'type' => MENU_NORMAL_ITEM,
    'access' => user_access('access administration pages'));
  return $items;
}
/**
* Implementation of hook_settings
*/
function outline_designer_settings() {  
  //build out a list of the packaged icons
  $packaged_icons = 'Outline Designer Icons: ';
  $icons = array('add','edit','delete','duplicate','rename','node','page','folder');
  foreach($icons as $title){
    $packaged_icons.='<img src="' . base_path() . drupal_get_path('module','outline_designer') . '/images/' . $title . '.png" title="' . $title . '" alt="' . $title . '" hspace="2px" />';
  }
  $packaged_icons.=' <br />Uploaded Icons: ';
  //create it juuuust incase and make sure it's writable
  $dir = file_create_path(file_directory_path() . '/outline_designer');
  file_check_directory($dir, 1);

  if($handle = opendir('./' . file_directory_path() . '/outline_designer')){
    while(false !== ($file = readdir($handle))){
      if ($file != "." && $file != "..") {
        $packaged_icons.='<img src="' . base_path() . file_directory_path() . '/outline_designer/' . $file . '" title="' . $file . '" alt="' . $file . '" hspace="2px" />';
      }
    }
    closedir($handle);
  }
  //hidden space to throw out the icons before the rest of the content
  $form["outline_designer_hidden"] = array(
    '#type' => 'hidden',
    '#title' => 'Available icons',
    '#suffix' => $packaged_icons,
  );
  $content_types = array();
  $result = db_query("SELECT type,name FROM node_type");
  while($value = db_fetch_array($result)){
    array_push($content_types,t($value['type']));
    //create a textfield incase they want to enter an icon that way
    $form["outline_designer_" . $value['type'] . "_icon_link"] = array(
      '#type' => 'textfield',
      '#title' => t("Link to " . $value['name'] . " Icon"),
      '#default_value' => variable_get("outline_designer_" . $value['type'] . "_icon", drupal_get_path('module','outline_designer') . "/images/node.png"),
      '#description' => '<img src="' . base_path() . variable_get("outline_designer_" . $value['type'] . "_icon", drupal_get_path('module','outline_designer') . "/images/node.png") . '" /> ' . t("You can drag the icons from above onto this field to get the full path or add a path of your own."),
      '#required' => false,
      );
    //Create a upload field for each content type so icons can be added for them
    $form["outline_designer_" . $value['type'] . "_icon"] = array(
      '#type' => 'file',
      '#size' => '10',
      '#title' => t("Icon for " . $value['name']),
      '#default_value' => variable_get("outline_designer_" . $value['type'] . "_icon", drupal_get_path('module','outline_designer') . "/images/node.png"),
      '#description' => t("This is what icon will be associated to each content type in the outline designer. They must be 16x16 gif or png format."),
      '#required' => false,
      );
  }
  $form["outline_designer_default_type"] = array(
    '#type' => 'select',
    '#title' => t("Default Content Type"),
    '#default_value' => variable_get("outline_designer_default_type", "page"),
    '#options' => drupal_map_assoc($content_types), 
    '#description' => t("This is what content type will be used when creating a new outline as well as the default if a user has the ability to create content but not change types."),
    '#required' => true,
    '#multiple' => false,
  );
  
  $form["outline_designer_content_types"] = array(
    '#type' => 'select',
    '#title' => t("Valid Content Types"),
    '#default_value' => variable_get("outline_designer_content_types", ""),
    '#options' => drupal_map_assoc($content_types), 
    '#description' => t("This defines which content types are accessible by this method of content creation"),
    '#required' => true,
    '#multiple' => true,
    );
  $form['#attributes'] = array('enctype' => "multipart/form-data");
  return system_settings_form($form);  
}
/**
* Implementation of hook_settings_submit
*/
function outline_designer_settings_submit($form_id, $form_values) {  
  $dir = file_create_path(file_directory_path() . '/outline_designer');
  $is_writable = file_check_directory($dir, 1);
  if($is_writable) { 
    $result = db_query("SELECT type,name FROM node_type");
    while($value = db_fetch_array($result)){
      $source = file_check_upload("outline_designer_" . $value['type'] . "_icon");   
      // Security measure to prevent exploit of file.php.png
      if($source->filename != ''){
        $source->filename = upload_munge_filename($source->filename);
        if($file = file_save_upload($source,$dir )) {
          $image_ary = image_get_info($file->filepath);
          if($image_ary){
            //icons must be 16x16, png or gif format
            if($image_ary['mime_type'] != 'image/png' && $image_ary['mime_type'] != 'image/gif'){
              file_delete($file->filepath);
              drupal_set_message('Uploaded file must be PNG or GIF format.','error');
            }else{
              if($image_ary['height'] != 16 || $image_ary['width'] != 16){
                file_delete($file->filepath);
                drupal_set_message('Uploaded image must be 16x16 pixels.','error');
              }else{
                drupal_set_message(t('New ' . $value['name'] . ' icon saved.'));
                variable_set("outline_designer_" . $value['type'] . "_icon", $file->filepath);
              }
            }
          }else{
            file_delete($file->filepath);
            drupal_set_message('Uploaded file does not appear to be a valid image file. Please try again.','error');
          }
        }
      }else{
        //this is the case when there is no image uploaded to associate the textfield icon to the icon page to use, this will allow for references to icons already used
        
        $icon = $form_values["outline_designer_" . $value['type'] . "_icon_link"];
        $base_path = base_path();
        //pull off the site name if it was included
        if(strpos(' ' . $icon,$base_path ) != 0){
          $pos = strpos($icon,$base_path) + strlen($base_path);
          $icon = substr($icon,$pos);
        }
        //clean up the string incase those other two didn't do the trick
        $icon = substr($icon,strpos($icon,drupal_get_path('module','outline_designer')));
        $icon = substr($icon,strpos($icon,file_directory_path()));
        //potentially this isn't a valid icon path on our server...need to still check this
        variable_set("outline_designer_" . $value['type'] . "_icon", $icon);
      }
    }
  }
  //over-riding the normal submit function so these need to be set manually
  variable_set("outline_designer_default_type",$form_values['outline_designer_default_type']);
  variable_set("outline_designer_content_types",$form_values['outline_designer_content_types']);
}
/**
* Helper function for the rendering of the outline designer page
*/
function _outline_designer_outline() {
  global $base_url;
  $drag = user_access('drag-and-drop content');
  if($drag == ''){ 
    $drag = 0;
  }
  $change_type = user_access('change content types');
  if($change_type == ''){
    $change_type = 0;
  }
  $outline_posts = user_access('outline posts in books');
  if($outline_posts == ''){
    $outline_posts = 0;
  }
  $duplicate = user_access('duplicate nodes');
  if($duplicate == ''){
    $duplicate = 0;
  }
  //this will setup all the Drupal / PHP based permission and path variables that we'll want to access from the javascript side of things
  //this could have been accomplished via ajax (in most cases) but this is much more efficent
  $od_path = drupal_get_path('module','outline_designer');
  $js = 'var AJAX_URL = "' . $base_url . '/ajax.php"
     var DRUPAL_OD_PATH = "' . $od_path . '";
     var DRUPAL_PATH = "' . $base_url . '";
     var DRAG_AND_DROP_CONTENT = ' . $drag . ';
     var CHANGE_CONTENT_TYPES = ' . $change_type . ';
     var OUTLINE_POSTS = ' . $outline_posts . ';
     var ALLOW_DUPLICATE = ' . $duplicate . ';
     var treeObj;';
  drupal_add_js($js,'inline');
  drupal_add_css($od_path . '/style.css');
  drupal_add_js($od_path . '/scripts.js');
  
  $output.='
  <div id="tree_container" style="width:100%;padding:10px;border:1px #000000 dotted;" class="tree_normal">
    <div width="400px" style="width:400px;float:left;">
      <input type="button" onclick="treeObj.collapseAll();" value="Collapse all">&nbsp;&nbsp;&nbsp;
      <input type="button" onclick="treeObj.expandAll();" value="Expand all">
    </div>
    <div style="float:right;">
    <select id="selected_outline" onchange="load_outline(this.value);"></select>';
  if(user_access('create new books') == 1){
    $output.='<input type="button" onclick="new_structure();" value="New">&nbsp;&nbsp;&nbsp;
    <input type="button" onclick="duplicate_structure();" value="Duplicate">&nbsp;&nbsp;&nbsp;
    <input type="button" onclick="delete_structure();" value="Delete">&nbsp;&nbsp;&nbsp;';
  }
  $output.='
    </div>
    <br /><br />
  <ul id="node0" class="dhtmlgoodies_tree">
  <ul style="display:inline"></ul>
  </ul>
  </div>';
    return $output;
}

/**
* This is a helper function for pulling all the data about a tree together to be rendered, recursively traversing the tree to get all the nodes, it is a helper function for the load_tree ajax function
*/
function _outline_designer_tree_recurse($nid, $tree = array()) {
  global $user;
  $result = db_query("SELECT node.uid,node.nid,parent,title,type FROM book JOIN node ON node.vid=book.vid WHERE book.parent=" . $nid . " ORDER BY weight");
  while($value = db_fetch_array($result)){
    if($value['type'] == 'book'){
    $term = 'pages';
  }else{
    $term = 'content';
  }
   if(user_access('edit ' . $value['type'] . ' ' . $term)){
    $allow_edit = 1;
  }elseif($user->uid == $value['uid'] && user_access('edit own ' . $value['type'] . ' ' . $term)){
    $allow_edit = 1;
  }else{
    $allow_edit = 0;
  }
    array_push($tree,array(
            $value['nid'],
            $value['parent'],
            $value['title'],
            variable_get("outline_designer_" . $value['type'] . "_icon",drupal_get_path('module','outline_designer') . "/images/node.png"),
            $allow_edit)
      );
    $tree = _outline_designer_tree_recurse($value['nid'],$tree);
  }
  return $tree;
}
/**
* this only returns the nids that will neeed to be converted during the duplication process, it is a helper function for the duplicate ajax command
*/
function _outline_designer_recurse_duplicate_nodes($nid, $tree = array()) {
  $result = db_query("SELECT node.nid FROM book JOIN node ON node.vid=book.vid WHERE book.parent=" .$nid . " ORDER BY weight");
  while($value = db_fetch_array($result)){
    $tree[$value['nid']] = 0;
    $tree = _outline_designer_recurse_duplicate_nodes($value['nid'],$tree);
  }
  return $tree;
}