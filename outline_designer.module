<?php
// $Id$
//ELMS: Outline Designer - Usability improvements for speedy outline creation in Drupal 6.x
//Copyright (C) 2008  The Pennsylvania State University
//
//Bryan Ollendyke
//bto108@psu.edu
//
//Keith D. Bailey
//kdb163@psu.edu
//
//12 Borland
//University Park,  PA 16802
//
//This program is free software; you can redistribute it and/or modify
//it under the terms of the GNU General Public License as published by
//the Free Software Foundation; either version 2 of the License,  or
//(at your option) any later version.

//This program is distributed in the hope that it will be useful,
//but WITHOUT ANY WARRANTY; without even the implied warranty of
//MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//GNU General Public License for more details.

//You should have received a copy of the GNU General Public License along
//with this program; if not,  write to the Free Software Foundation,  Inc.,
//51 Franklin Street,  Fifth Floor,  Boston,  MA 02110-1301 USA.

/**
 * @file
 * Massive usability improvement for quickly structuring / creating content.
 *
 * This lets you build out content quickly while obeying permissions.
 */

/**
 * Implementation of hook_init().
 */
function outline_designer_init() {
  if (arg(0) == 'admin' && arg(1) == 'content' && arg(2) == 'book' && arg(3) != '' && arg(3) != 'list' && arg(3) != 'settings' && arg(3) != 'outline_designer') {
    drupal_add_css(drupal_get_path('module','outline_designer') .'/outline_designer.css');
    drupal_add_js(drupal_get_path('module', 'outline_designer') .'/jquery.contextmenu.js');
	drupal_add_js(drupal_get_path('module', 'outline_designer') .'/scripts.js','footer');
  
  //these are the misc javascript libraries that normally don't get included but we need to cause things ar einine
  drupal_add_js('misc/jquery.form.js');
  drupal_add_js('misc/ahah.js');
  drupal_add_js('misc/progress.js');
  drupal_add_js('misc/autocomplete.js');
  drupal_add_js('misc/collapse.js');
  drupal_add_js('misc/textarea.js');
  
  //include thickbox which is required
  _thickbox_doheader();
  
  //all paths passed to JS should have a trailing / by convention
  $js = 'var factor = 1;
  var DRUPAL_PATH = "'. base_path() .'";
  var AJAX_PATH = "'. base_path() .'?q=outline_designer/ajax/";
  var OD_PATH = "'. base_path() . drupal_get_path('module', 'outline_designer') .'/";
  var OD_TYPES = Array();
  var active_nid = "";
  var ROOT_NID = "'. arg(3) .'";
    var BOOK_DEFAULT_TYPE = "'. variable_get('book_child_type','book') .'";
  //build out the context menu options, very easy to add to!
  var menu1 = [   
    {"Node":{icon: "'. base_path() . drupal_get_path('module', 'outline_designer') .'/images/node.png", disabled:true}}, 
    $.contextMenu.separator, 
    {"Add Child":{ onclick:function(menuItem,menu) { od_add_child(); }, icon: "'. base_path() . drupal_get_path('module', 'outline_designer') .'/images/add.png", disabled:false } },
    {"Edit":{ onclick:function(menuItem,menu) { od_edit(); }, icon: "'. base_path() . drupal_get_path('module', 'outline_designer') .'/images/edit.png", disabled:false  } },
    {"Rename":{ onclick:function(menuItem,menu) { od_rename(); }, icon: "'. base_path() . drupal_get_path('module', 'outline_designer') .'/images/rename.png", disabled:false  } },
    {"Duplicate":{ onclick:function(menuItem,menu) { od_duplicate(); }, icon: "'. base_path() . drupal_get_path('module', 'outline_designer') .'/images/duplicate.png", disabled:false  } },
    {"Delete":{ onclick:function(menuItem,menu) { od_delete(); }, icon: "'. base_path() . drupal_get_path('module', 'outline_designer') .'/images/delete.png", disabled:false } }, 
    {"Change Type":{ onclick:function(menuItem,menu) { od_change_type(); }, icon: "'. base_path() . drupal_get_path('module', 'outline_designer') .'/images/change.png", disabled:false } },
    {"Permissions":{ onclick:function(menuItem,menu) { od_permissions(); }, icon: "'. base_path() . drupal_get_path('module', 'outline_designer') .'/images/node.png", disabled:false } },
  
  ];
  var active_type = BOOK_DEFAULT_TYPE;' . "\n";
  //Select only those that the book module say can be outlined
    $types_ary = variable_get('book_allowed_types',array('page'));
  $types_allowed = "type=''";
  for ($i=0; $i<count($types_ary); $i++) {
    $types_allowed.=" OR type='". $types_ary[$i] ."'";
  }
  $ajax_ary = variable_get('ajax_types_default',array());
  $result = db_query("SELECT type,name FROM {node_type} WHERE $types_allowed ORDER BY name");
  while ($value = db_fetch_array($result)) {
    //ensure there is no permission escalation being able to change to types they aren't allowed to
    if (user_access(_outline_designer_get_pstr('create',  $value['type']))) {
      $js.= 'OD_TYPES["'. $value['type'] .'"] = Array("'. $value['name'] .'","'. variable_get("outline_designer_". $value['type'] ."_icon", drupal_get_path('module', 'outline_designer') ."/images/node.png") .'");'. "\n";
    }
	if( !isset($ajax_ary[$value['type'] . '_node_form']) ) {
	  $ajax_ary[$value['type'] . '_node_form'] = $value['type'] . '_node_form';
	}
  }
  variable_set('ajax_types_default',$ajax_ary);
  drupal_add_js($js,'inline');
  //add in TinyMCE support if the module exists
  if (module_exists('tinymce')) {
    drupal_add_js(drupal_get_path('module', 'tinymce') .'/tinymce/jscripts/tiny_mce/tiny_mce.js');
    tinymce_process_textarea('');
  }
  }
  elseif (arg(0) == 'admin' && arg(1) == 'content' && arg(2) == 'book' && (arg(3) == '' || arg(3) == 'list') ) {
    drupal_add_css(drupal_get_path('module','outline_designer') .'/outline_designer.css');
	$js = '
	function od_add_book(){
	window.location="'. base_path() .'?q=node/add/'. variable_get('book_child_type','book') .'&edit[book][bid]=new";
	}
	$(document).ready(function(){$(".sticky-table").parent().prepend('."'".'<div style="width:120px;" class="context-menu context-menu-theme-human"><div title="" class="context-menu-item"><div style="background-image: url('. base_path() . drupal_get_path('module', 'outline_designer') .'/images/add.png);" class="context-menu-item-inner" onclick="od_add_book();">Add Book</div></div></div>'."');});";
    drupal_add_js($js,'inline');
  }
}

/**
 * Implemention of hook_form_alter().
 */
function outline_designer_form_alter(&$form, $form_state, $form_id) {
  if($form_id == 'book_admin_edit') {
    $form['ahah'] = array(
    '#type' => 'submit',
	'#id' => 'reload_table',
	'#value' => t('AHAH Submit'),
	'#weight' => 1,
	'#submit' => array(),
	'#ahah' => array(
	  'event' => 'change',
	  'path' => 'outline_designer/ajax/reload_table/'. arg(3),
	  'wrapper' => 'book-admin-edit',
	  'method' => 'replace',
	  'effect' => 'fade',
	 ),
  );
    $od_path = drupal_get_path('module', 'outline_designer');
    //unset things so that the form renders with everything stripped off
    //helps OD work in browsers that respect <enter> button for submitting the whole page/form
    $form["#submit"] = '';
    $form["#action"] = '';
    $form["#method"] = '';
    $form["save"] ='';
    $base_path = base_path();
    foreach ($form['table'] as $key => $row) {
      if($key != '#theme' && $key != '#tree') {
        $type = db_result(db_query("SELECT type FROM {node} WHERE nid=%s",$row['nid']['#value']));
          $form['table'][$key]['title']['#prefix'] = '<img id="node-'. $row['nid']['#value'] .'-icon" src="'. $base_path . variable_get("outline_designer_". $type ."_icon", $od_path ."/images/node.png") .'"  alt="Nid: '. $row['nid']['#value'] .'" title="Nid: '. $row['nid']['#value'] .'" style="float:left; margin:2px;" /><img src="'. $base_path . $od_path .'/images/edit.png" id="node-'. $row['nid']['#value'] .'" class="outline_designer_edit_button" />';
      }
    }
  }
}

/**
 * Implementation of hook_perm().
 */
function outline_designer_perm() {
  return array('access ajax path');
}

/**
 * Implementation of hook_block().
 */
function outline_designer_block($op = 'list', $delta = 0, $edit = array()) {
  // The $op parameter determines what piece of information is being requested.
  switch ($op) {
    case 'list':
      $blocks[0] = array(
        'info'       => t('Outline Designer'),
      );
      return $blocks;
	break;
    case 'view': default:
	  switch($delta){
	  case 0:  
		// The subject is displayed at the top of the block. Note that it
	    // should be passed through t() for translation.
	    $block['subject'] = t('Outline Designer');
	    // The content of the block is typically generated by calling a custom function.
	    $block['content'] = l(t('Outline Designer'),'admin/content/book') .'<br />'. l(t('Settings'),'admin/content/book/settings') .'<br />'. l(t('Usability Settings'),'admin/content/book/outline_designer');
      break;
	  }
	  return $block;
	break;
  }
}


/**
 * Implementation of hook_menu().
 */
function outline_designer_menu() {
  $items = array();
  $items['outline_designer/ajax'] = array(
      'access arguments' => array('access ajax path'),
      'page callback'  => '_outline_designer_ajax',
	  'access callback'  => TRUE,
      'type'  => MENU_CALLBACK);
  $items['admin/content/book/outline_designer'] = array(
      'title' => 'Usability',
      'description' => 'The Outline Designer settings allow you to associate icons to content types for use in structuring book content.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('_outline_designer_settings'),
      'type' => MENU_LOCAL_TASK,
    'weight' => 9,
      'access arguments' => array('administer site configuration'));
  return $items;
}
/**
 * Implementation of hook_settings().
 */
function _outline_designer_settings($form_state) {
  //build out a list of the packaged icons
  $packaged_icons = 'Outline Designer Icons: ';
  $icons = array('add', 'edit', 'delete', 'duplicate', 'rename', 'node', 'page', 'folder','change');
  foreach ($icons as $title) {
    $packaged_icons .='<img src="'. base_path() . drupal_get_path('module', 'outline_designer') .'/images/'. $title .'.png" title="'. $title .'" alt="'. $title .'" hspace="2px" />';
  }
  $packaged_icons .=' <br />Uploaded Icons: ';
  //create it juuuust incase and make sure it's writable
  $dir = file_create_path(file_directory_path() .'/outline_designer');
  file_check_directory($dir,  1);

  if ($handle = opendir('./'. file_directory_path() .'/outline_designer')) {
    while (FALSE !== ($file = readdir($handle))) {
      if ($file != "." && $file != "..") {
        $packaged_icons .='<img src="'. base_path() . file_directory_path() .'/outline_designer/'. $file .'" title="'. $file .'" alt="'. $file .'" hspace="2px" />';
      }
    }
    closedir($handle);
  }
  //hidden space to throw out the icons before the rest of the content
  $form["outline_designer_hidden"] = array(
    '#type' => 'hidden',
    '#title' => 'Available icons',
    '#suffix' => $packaged_icons,
  );
  $content_types = array();
  $result = db_query("SELECT type, name FROM {node_type}");
  while ($value = db_fetch_array($result)) {
    array_push($content_types, t($value['type']));
    //create a textfield incase they want to enter an icon that way
    $form["outline_designer_". $value['type'] ."_icon_link"] = array(
      '#type' => 'textfield',
      '#title' => t("Link to ". $value['name'] ." Icon"),
      '#default_value' => variable_get("outline_designer_". $value['type'] ."_icon",  drupal_get_path('module', 'outline_designer') ."/images/node.png"),
      '#description' => '<img src="'. base_path() . variable_get("outline_designer_". $value['type'] ."_icon", drupal_get_path('module', 'outline_designer') ."/images/node.png") .'" /> '. t("You can drag the icons from above onto this field to get the full path or add a path of your own."), 
      '#required' => FALSE, 
      );
    //Create a upload field for each content type so icons can be added for them
    $form["outline_designer_". $value['type'] ."_icon"] = array(
      '#type' => 'file', 
      '#size' => '10', 
      '#title' => t("Icon for ". $value['name']), 
      '#description' => t("This icon will be associated with the %type-name content type in the outline designer. The icon must be 16x16, unless an <a href=@toolkit>image toolkit</a> is installed, and in jpg, gif or png format.", array('%type-name' => $value['type'], '@toolkit'=> url('admin/settings/image-toolkit'))), 
      '#required' => FALSE, 
    );
  }
  $form['#attributes'] = array('enctype' => "multipart/form-data");
  $form['submit'] = array('#type' => 'submit', '#value' => t('Submit'));
  return $form;  
}
/**
 * Implementation of hook_settings_submit().
 */
function _outline_designer_settings_submit($form, &$form_state) {  
  $dir = file_create_path(file_directory_path() .'/outline_designer');
  $is_writable = file_check_directory($dir,  1);
  if ($is_writable) { 
    $validators = array(
     'file_validate_is_image' => array(),
     '_outline_designer_validate_image_resolution' => array('16x16'),
     'file_validate_size' => array(30 * 1024), 
    );
    $result = db_query("SELECT type, name FROM {node_type}");
     while ($value = db_fetch_array($result)) {
       if ($file = file_save_upload("outline_designer_". $value['type'] ."_icon",  $validators, $dir)) {
         drupal_set_message(t('New '. $value['name'] .' icon saved.'));
         variable_set("outline_designer_". $value['type'] ."_icon",  $file->filepath);
       }
       else {
        //this is the case when there is no image uploaded to associate the textfield icon to the icon page to use,  this will allow for references to icons already used
        $icon = $form_state['values']["outline_designer_". $value['type'] ."_icon_link"];
        $base_path = base_path();
        //pull off the site name if it was included
        if ($base_path != '/' && $base_path != '') {
          if (strpos(' '. $icon, $base_path ) != 0) {
            $pos = strpos($icon, $base_path) + strlen($base_path);
            $icon = substr($icon, $pos);
          }
        }
        //clean up the string incase those other two didn't do the trick
        $icon = substr($icon, strpos($icon, drupal_get_path('module', 'outline_designer')));
        $icon = substr($icon, strpos($icon, file_directory_path()));
        //potentially this isn't a valid icon path on our server...need to still check this
        variable_set("outline_designer_". $value['type'] ."_icon",  $icon);
      }
    }
  }  
  drupal_set_message('Settings Saved!');
}

/**
 * Implementation of the ajax menu hook
 */
function _outline_designer_ajax() {
  global $user;
  //need to figure out which arg is which
  //arg 0 is always "outline_designer"
  //arg 1 is always "ajax"
  $action = arg(2); //action that's being performed
  $var1 = arg(3); //typically nid being acted on
  $var2 = arg(4); //additional data like title, ect.
  $var3 = arg(5); //even more data like type

  if (isset($action)) {
    switch ($action) {
      //in: active nid, parent nid, new weight
      //action: 
      //out: node id,  node type,  icon to render
      case 'drag_drop':
        $nid = $var1;
        $parent_nid = $var2;
		$weight = $var3;
        //load the parent / active node
        $node = node_load($nid);
        $parent = node_load($parent_nid);
        //set parent
        $node->book['plid'] = $parent->book['mlid'];
		$node->book['weight'] = $weight;
        $node->revision = 1;
        $node->log = "Outline Designer -- nid:$nid parent nid changed to $parent_nid";
        node_save($node);
        print "Node nid:$nid parent nid changed to $parent_nid";
      break;
      //in: node id, weight
      //action: saved / updated node
      //out: message
      case 'reweight':
        $nid = $var1;
        $weight = $var2;
        $node = node_load($nid);
        //set parent / weight
        $node->book['weight'] = $weight;
        node_save($node);
        print "Node nid:$nid weight has been updated";
      break;
	  //in: nothing
	  //action: rebuild the HTML of the table
	  //out: AHAH tabledrag object
	  case 'reload_table':
	    $nid = $var1;
		module_load_include('inc', 'book', 'book.admin');
		$form_state = array('storage' => '', 'submitted' => '', 'post' => array());
		$output = drupal_get_form('book_admin_edit',node_load($nid) );
		drupal_json(array('status' => TRUE, 'data' => $output) );
	  break;
      //in: node title,  node parent id
      //action: Insert a node
      //out: parent menu id, and message / new nid
      case 'add_child':
        $title = $var1;
        $type = $var2;
        $parent_nid = $var3;
        $title = str_replace("@2@F@",'/',$title);
        //set the node
        $node->title = $title;
        $node->type = $type;
        $node->uid = $user->uid;
        //load up the parent of this new item and then copy over the book structure stuff
        $parent = node_load($parent_nid);
        $node->book['weight'] = -15;
        $node->book['plid'] = $parent->book['mlid'];
        $node->book['bid'] = $parent->book['bid'];
        $node->book['menu_name'] = $parent->book['menu_name'];
        $node->book['module'] = $parent->book['module'];
        node_save($node);
        watchdog('content', '@type: added %title.', array('@type' => $node->type, '%title' => $node->title));
        print $parent->book['mlid'] .';msg:Node '. $node->nid .' added successfully!';
      break;
      //in: node id
	  //action: load node edit form
      //out: page w/ edit form
      case 'edit':
        $nid = $var1;
        $node = node_load($nid);
		if ($user->uid == $node->uid && user_access(_outline_designer_get_pstr('edit own',$node->type))) {
		  module_load_include('inc', 'node', 'node.pages');
          $output = node_page_edit($node);
		}
		elseif (user_access(_outline_designer_get_pstr('edit',$node->type))) {
          module_load_include('inc', 'node', 'node.pages');
          $output = node_page_edit($node);
		}
	    else {
         $output = 0;
		}
        print $output;
      break;
      //in: node id,  title
      //action: rename a single node
      //out: nothing
      case 'rename':
        $nid = $var1;
        $newtitle = $var2;
        $newtitle = str_replace("@2@F@",'/',$newtitle);
        $node = node_load($nid);
        $node->log = "Outline Designer -- node renamed from ". $node->title ." to ". $newtitle;
        watchdog('content', "Outline Designer -- node renamed from ". $node->title ." to ". $newtitle);
        print "Node $nid renamed from ". $node->title ." to ". $newtitle;
        $node->title = $newtitle;
        $node->revision = 1;
        node_save($node);
      break;
      //in: root node id
      //action: duplicate the node and associate the tree to the new branch (if multiple)
      //out: new root node
      case 'duplicate':
        $nid = $var1;
        $multiple = $var2;
		$dup_title = $var3;
		$node = node_load($nid);
        //snag the whole branch if multiple == 1
        if ($multiple == 0) {
          $node->nid = NULL;
		  $node->created = NULL;
		  $new_title = str_replace('%title',$node->title,$dup_title);
          $node->title = $new_title;
          node_save($node);
		  $nids = ' '. $nid . ' ';
        }
        else {
		  $nids = 's ';
          $map = array();
          //pull only the nodes that have this node as a parent
		  $mlid = $node->book['mlid'];
          $result = db_query("SELECT link_path FROM {menu_links} WHERE p1=%s  OR p2=%s  OR p3=%s  OR p4=%s  OR p5=%s  OR p6=%s  OR p7=%s  OR p8=%s  OR p9=%s",$mlid,$mlid,$mlid,$mlid,$mlid,$mlid,$mlid,$mlid,$mlid);
          while ($value = db_fetch_array($result)) {
		    $dup_node = node_load(str_replace('node/','',$value['link_path']));
			$nids.= ' '. $dup_node->nid . ', ';
			$dup_node->nid = NULL;
			$dup_node->created = NULL;
			$dup_node->revision = 1;
            $dup_node->log = "Outline Designer -- Duplicate of old node nid:$old_nid";
			if (isset($map[$dup_node->book['plid']]) ) {
			  $dup_node->book['plid'] = $map[$dup_node->book['plid']];
		    }
		    $new_title = str_replace('%title',$dup_node->title,$dup_title);
            $dup_node->title = $new_title;
			$old_mlid = $dup_node->book['mlid'];
			$dup_node->book['mlid'] = NULL;
            node_save($dup_node);
			$map[$old_mlid] = $dup_node->book['mlid'];
		  }
        }
       print 'Duplicate node nid:'. $nid .' successful';
      break;
      //in: list of node ids to delete
      //action: delete nodes
      //out: completion response
      case 'delete':
        $nid = $var1;
		$multiple = $var2;
		if ($multiple == 0) {
          node_delete($nid);
		}
		else {
		$node = node_load($nid);
          //pull only the nodes that have this node as a parent
		  $mlid = $node->book['mlid'];
          $result = db_query("SELECT link_path FROM {menu_links} WHERE p1=%s  OR p2=%s  OR p3=%s  OR p4=%s  OR p5=%s  OR p6=%s  OR p7=%s  OR p8=%s  OR p9=%s",$mlid,$mlid,$mlid,$mlid,$mlid,$mlid,$mlid,$mlid,$mlid);
          while ($value = db_fetch_array($result)) {
            node_delete(str_replace('node/','',$value['link_path']));
		  }
		}
        print "Node $nid successfully removed!";
      break;
      //in: node id,  node type name
      //action: change node type and resave
      //out: icon to render
      case 'change_type':
        $nid = $var1;
        $new_type = $var2;
        $node = node_load($nid);
        $log_msg = " Node $nid changed from '". $node->type ."' to '$new_type'";
        $node->log = "Outline Designer -- ". $log_msg;
        $node->type = $new_type;
        node_save($node);
        watchdog('content', "Outline Designer -- ". $log_msg);
        print $log_msg;
      break;
    }
  }
  exit();
}

function _outline_designer_get_pstr($op,  $type) {
  $term = 'content';
  switch ($type) {
    // Panels are a totally special case
    case 'panel':
      if ($op == 'create') {
        return 'create panel-nodes';
      }
      elseif ($op == 'edit') {
        return 'administer panel-nodes';
      }
      elseif ($op == 'edit own') {
        return 'edit own panel-nodes';
      }
      break;

    case 'book':
      $term = 'pages';
      break;

    default:
      break;
  }
      
  return ($op .' '. $type .' '. $term);
}

function _outline_designer_validate_image_resolution(&$file, $dimensions) {
  $errors = array();
  // Check first that the file is an image.
  if ($info = image_get_info($file->filepath)) {
    // Check if the icon matches the given dimensions.
    list($width, $height) = explode('x', $dimensions);
    if ($info['width'] != $width || $info['height'] != $height) {
      // Try to resize the image to fit the dimensions if it doesn't.
      if (image_get_toolkit() && image_scale_and_crop($file->filepath, $file->filepath, $width, $height)) {
       drupal_set_message(t('The image was resized to the allowed dimensions of %dimensions pixels.', array('%dimensions' => $dimensions)));
       // Clear the cached filesize and refresh the image information.
       clearstatcache();
       $info = image_get_info($file->filepath);
       $file->filesize = $info['file_size'];
      }
      else {
        $errors[] = t('Image dimensions need to be %dimensions pixels.', array('%dimensions' => $maximum_dimensions));
      }
    }
  }
  return $errors;
 }
