<?php
// $Id$
//ELMS: Outline Designer - Usability improvements for speedy outline creation in Drupal 6.x
//Copyright (C) 2008-2010  The Pennsylvania State University
//
//Bryan Ollendyke
//bto108@psu.edu
//
//Keith D. Bailey
//kdb163@psu.edu
//
//12 Borland
//University Park,  PA 16802
//
//This program is free software; you can redistribute it and/or modify
//it under the terms of the GNU General Public License as published by
//the Free Software Foundation; either version 2 of the License,  or
//(at your option) any later version.

//This program is distributed in the hope that it will be useful,
//but WITHOUT ANY WARRANTY; without even the implied warranty of
//MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//GNU General Public License for more details.

//You should have received a copy of the GNU General Public License along
//with this program; if not,  write to the Free Software Foundation,  Inc.,
//51 Franklin Street,  Fifth Floor,  Boston,  MA 02110-1301 USA.

/**
 * @file
 * Massive usability improvement for quickly structuring / creating content.
 *
 * This lets you build out content quickly while obeying permissions.
 */

/**
 * Implementation of hook_help().
 */
function outline_designer_help($path, $arg) {
  switch ($path) {
    case 'admin/content/book/settings':
      return 'Use this to change what content types are available while outlining content. The default will also be what is automatically selected when adding new content.';
    case 'admin/content/book/outline_designer':
      return "Use icons that visually describe your content so that there is no confusion about what's being created.  It also helps in visualizing your site when you have pages, containers, webforms and other content all living in the same hierarchy.";
    case 'admin/build/block/add':
  }
}

/**
 * Implementation of hook_init().
 */
function outline_designer_init() {
  if (arg(0) == 'admin' && arg(1) == 'content' && arg(2) == 'book' && arg(3) != '' && arg(3) != 'list' && arg(3) != 'settings' && arg(3) != 'outline_designer') {
    drupal_add_css(drupal_get_path('module', 'outline_designer') .'/css/outline_designer.css');
    drupal_add_js(drupal_get_path('module', 'outline_designer') .'/script/jquery.contextmenu.js');
    drupal_add_js(drupal_get_path('module', 'outline_designer') .'/script/overrides.js', 'header');
    drupal_add_js(drupal_get_path('module', 'outline_designer') .'/script/scripts.js', 'footer');

  //Select only those that the book module say can be outlined
  $types_ary = variable_get('book_allowed_types', array('page'));

  //make sure default is allowed by this user
  if (user_access(_outline_designer_get_pstr('create', variable_get('book_child_type', 'book')))) {
    $default_type = variable_get('book_child_type', 'book');
  }
  else {
    foreach ($types_ary as $current_type) {
      if (user_access(_outline_designer_get_pstr('create', $current_type))) {
        $default_type = $current_type;
      }
    }
  }
  //all paths passed to JS should have a trailing / by convention
  $js = 'Drupal.settings.outline_designer.path = "'. base_path() . drupal_get_path('module', 'outline_designer') .'/";
  Drupal.settings.outline_designer.types = Array();
  Drupal.settings.outline_designer.rootNid = "'. arg(3) .'";
  Drupal.settings.outline_designer.defaultType = "'. $default_type .'";'."\n";
  $result = db_query("SELECT type,name FROM {node_type} ORDER BY name");
  while ($value = db_fetch_array($result)) {
    //ensure there is no permission escalation
    if (array_search($value['type'], $types_ary) === FALSE) {
    }
    elseif (user_access(_outline_designer_get_pstr('create',  $value['type']))) {
      $js .= 'Drupal.settings.outline_designer.types["'. $value['type'] .'"] = Array("'. $value['name'] .'","'. variable_get("outline_designer_". $value['type'] ."_icon", drupal_get_path('module', 'outline_designer') ."/images/page.png") .'");'. "\n";
    }
  }
  drupal_add_js($js, 'inline');
  }
  elseif (arg(0) == 'admin' && arg(1) == 'content' && arg(2) == 'book' && (arg(3) == '' || arg(3) == 'list') ) {
    drupal_add_css(drupal_get_path('module', 'outline_designer') .'/css/outline_designer.css');
  $js = '
  function od_add_book(){
    window.location="'. base_path() .'?q=node/add/'. variable_get('book_child_type', 'book') .'";
  }
  $(document).ready(function(){$(".sticky-table").before('."'".'<div style="width:120px;" class="context-menu context-menu-theme-human"><div title="" class="context-menu-item"><div style="background-image: url('. base_path() . drupal_get_path('module', 'outline_designer') .'/images/add_content.png);" class="context-menu-item-inner" onclick="od_add_book();">Add Book</div></div></div>'."');
  });";
    drupal_add_js($js, 'inline');
  }
}

/**
 * Implementation of hook_form_alter().
 */
function outline_designer_form_alter(&$form, $form_state, $form_id) {
  if ($form_id == 'book_admin_edit') {
    $form['ahah'] = array(
    '#type' => 'submit',
    '#id' => 'reload_table',
    '#value' => t('AHAH Submit'),
    '#weight' => 1,
    '#submit' => array(),
    '#ahah' => array(
      'event' => 'change',
      'path' => 'outline_designer/ajax/reload_table/'. arg(3),
      'wrapper' => 'book-admin-edit',
      'method' => 'replace',
      'effect' => 'none',
      ),
    );
    $od_path = drupal_get_path('module', 'outline_designer');
    //unset things so that the form renders with everything stripped off
    //helps OD work in browsers that respect <enter> button for submitting the whole page/form
    $form["#submit"] = '';
    $form["#action"] = 'outline_designer/ajax/reload_table/'. arg(3);
    $form["#method"] = 'POST';
    $form["save"] ='';
    $base_path = base_path();
    $count = 0;
    foreach ($form['table'] as $key => $row) {
      $count++;
      if ($key != '#theme' && $key != '#tree') {
        $type = db_result(db_query("SELECT type FROM {node} WHERE nid='%s'", $row['nid']['#value']));
          $form['table'][$key]['title']['#prefix'] = '<img alt="'. $type .'" id="node-'. $row['nid']['#value'] .'-icon" src="'. $base_path . variable_get("outline_designer_". $type ."_icon", $od_path ."/images/page.png") .'"  alt="Nid: '. $row['nid']['#value'] .'" title="Nid: '. $row['nid']['#value'] .'" style="float:left; margin:2px;" /><img src="'. $base_path . $od_path .'/images/settings.png" alt="Content operations" title="Content operations" id="node-'. $row['nid']['#value'] .'" class="outline_designer_edit_button" />';
          //if this has kids then give it a drop down
          if ($form['table'][$key]['#item']['has_children'] == 1) {
            $form['table'][$key]['title']['#suffix'] = '<img src="'. base_path() . drupal_get_path('module', 'outline_designer') .'/images/open.png"  alt="open" class="od-toggle-open" id="collapse-'. $row['nid']['#value'] .'" />';
          }
      }
    }
    //this is to trap for a goofy Drupal js error that's core
    if ($count == 2) {
      //Select only those that the book module say can be outlined
      $types_ary = variable_get('book_allowed_types', array('page'));

      //make sure default is allowed by this user
      if (user_access(_outline_designer_get_pstr('create', variable_get('book_child_type', 'book')))) {
        $default_type = variable_get('book_child_type', 'book');
      }
      else {
        foreach ($types_ary as $current_type) {
          if (user_access(_outline_designer_get_pstr('create', $current_type))) {
            $default_type = $current_type;
          }
        }
      }
      drupal_set_message(t('Books need to have at least one piece of content in them in order to work correctly with the outline designer'), 'error');
      drupal_goto('node/add/'. $default_type, 'parent='. $form['#node']->book['mlid'] .'&destination='. $_GET['q']);
    }
    $form['table']['#prefix'] = '<fieldset class="collapsible"><legend>Operations</legend><div style="width:120px;" class="context-menu context-menu-theme-human"><div title="Add Content" alt="Add Content" class="context-menu-item"><div style="background-image: url('. base_path() . drupal_get_path('module', 'outline_designer') .'/images/add_content.png);" class="context-menu-item-inner" onclick="Drupal.settings.outline_designer.activeNid='. arg(3) .';Drupal.outline_designer.form_render('."'add_content'".');">Add Content</div></div></div>Interface Size: <a href="#" onclick="Drupal.outline_designer.scale(-1);">Smaller</a>&nbsp;&nbsp;<a href="#" onclick="Drupal.outline_designer.scale(1);">Bigger</a>&nbsp;&nbsp;<a href="#" onclick="Drupal.outline_designer.scale(0);">Reset</a></fieldset>';
  }
}

/**
 * Implementation of hook_perm().
 */
function outline_designer_perm() {
  return array('access ajax path');
}

/**
 * Implementation of hook_menu().
 */
function outline_designer_menu() {
  $items = array();
  $items['outline_designer/ajax'] = array(
      'access arguments' => array('access ajax path'),
      'page callback'  => '_outline_designer_ajax',
      'type'  => MENU_CALLBACK,
  );
  $items['admin/content/book/outline_designer'] = array(
      'title' => 'Usability',
      'description' => 'The Outline Designer settings allow you to associate icons to content types for use in structuring book content.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('_outline_designer_settings'),
      'type' => MENU_LOCAL_TASK,
      'weight' => 9,
      'access arguments' => array('administer site configuration')
  );
  $items['admin/settings/outline_designer'] = array(
      'title' => 'Outline Designer',
      'description' => 'The Outline Designer settings allow you to associate icons to content types for use in structuring book content.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('_outline_designer_settings_redirect'),
      'type' => MENU_NORMAL_ITEM,
      'access arguments' => array('administer site configuration')
  );
  return $items;
}

function _outline_designer_settings_redirect() {
  drupal_goto('admin/content/book/outline_designer');
}
/**
 * Implementation of hook_settings().
 */
function _outline_designer_settings($form_state) {
  //build out a list of the packaged icons
  $packaged_icons = 'Outline Designer Icons: ';
  $icons = array('page', 'story', 'folder', 'link', 'node', 'add_content', 'edit', 'delete', 'duplicate', 'rename', 'change_type', 'settings', 'save');
  foreach ($icons as $title) {
    $packaged_icons .='<img src="'. base_path() . drupal_get_path('module', 'outline_designer') .'/images/'. $title .'.png" title="'. $title .'" alt="'. $title .'" hspace="2px" />';
  }
  $packaged_icons .=' <br />Uploaded Icons: ';
  //create it juuuust incase and make sure it's writable
  $dir = file_create_path(file_directory_path() .'/outline_designer');
  file_check_directory($dir,  1);

  if ($handle = opendir('./'. file_directory_path() .'/outline_designer')) {
    while (FALSE !== ($file = readdir($handle))) {
      if ($file != "." && $file != "..") {
        $packaged_icons .='<img src="'. base_path() . file_directory_path() .'/outline_designer/'. $file .'" title="'. $file .'" alt="'. $file .'" hspace="2px" />';
      }
    }
    closedir($handle);
  }
  //hidden space to throw out the icons before the rest of the content
  $form["outline_designer_hidden"] = array(
    '#type' => 'hidden',
    '#title' => 'Available icons',
    '#suffix' => $packaged_icons,
  );
  $content_types = array();
  $result = db_query("SELECT type, name FROM {node_type}");
  while ($value = db_fetch_array($result)) {
    array_push($content_types, t($value['type']));
    //create a textfield incase they want to enter an icon that way
    $form["outline_designer_". $value['type'] ."_icon_link"] = array(
      '#type' => 'textfield',
      '#title' => t("Link to ". $value['name'] ." Icon"),
      '#default_value' => variable_get("outline_designer_". $value['type'] ."_icon",  drupal_get_path('module', 'outline_designer') ."/images/page.png"),
      '#description' => '<img src="'. base_path() . variable_get("outline_designer_". $value['type'] ."_icon", drupal_get_path('module', 'outline_designer') ."/images/page.png") .'" /> '. t("You can drag the icons from above onto this field to get the full path or add a path of your own."),
      '#required' => FALSE,
      );
    //Create a upload field for each content type so icons can be added for them
    $form["outline_designer_". $value['type'] ."_icon"] = array(
      '#type' => 'file',
      '#size' => '10',
      '#title' => t("Icon for ". $value['name']),
      '#description' => t("This icon will be associated with the %type-name content type in the outline designer. The icon must be 16x16, unless an <a href=@toolkit>image toolkit</a> is installed, and in jpg, gif or png format.", array('%type-name' => $value['type'], '@toolkit' => url('admin/settings/image-toolkit'))),
      '#required' => FALSE,
    );
  }
  $form['#attributes'] = array('enctype' => "multipart/form-data");
  $form['submit'] = array('#type' => 'submit', '#value' => t('Submit'));
  return $form;
}
/**
 * Implementation of hook_settings_submit().
 */
function _outline_designer_settings_submit($form, &$form_state) {
  $dir = file_create_path(file_directory_path() .'/outline_designer');
  $is_writable = file_check_directory($dir,  1);
  if ($is_writable) {
    $validators = array(
     'file_validate_is_image' => array(),
     '_outline_designer_validate_image_resolution' => array('16x16'),
     'file_validate_size' => array(30 * 1024),
    );
    $result = db_query("SELECT type, name FROM {node_type}");
    while ($value = db_fetch_array($result)) {
      if ($file = file_save_upload("outline_designer_". $value['type'] ."_icon",  $validators, $dir)) {
        drupal_set_message(t('New '. $value['name'] .' icon saved.'));
        variable_set("outline_designer_". $value['type'] ."_icon",  $file->filepath);
      }
      else {
        //this is the case when there is no image uploaded to associate the textfield icon to the icon page to use,  this will allow for references to icons already used
        $icon = $form_state['values']["outline_designer_". $value['type'] ."_icon_link"];
        $base_path = base_path();
        //pull off the site name if it was included
        if ($base_path != '/' && $base_path != '') {
          if (strpos(' '. $icon, $base_path ) != 0) {
            $pos = strpos($icon, $base_path) + drupal_strlen($base_path);
            $icon = drupal_substr($icon, $pos);
          }
        }
        //clean up the string incase those other two didn't do the trick
        $icon = drupal_substr($icon, strpos($icon, drupal_get_path('module', 'outline_designer')));
        $icon = drupal_substr($icon, strpos($icon, file_directory_path()));
        //potentially this isn't a valid icon path on our server...need to still check this
        variable_set("outline_designer_". $value['type'] ."_icon",  $icon);
      }
    }
  }
  drupal_set_message(t('Settings Saved'));
}

/**
 * Implementation of the ajax menu hook
 */
function _outline_designer_ajax() {
  global $user;
  //need to figure out which arg is which
  //arg 0 is always "outline_designer"
  //arg 1 is always "ajax"
  $action = arg(2); //action that's being performed
  $var1 = arg(3); //typically nid being acted on
  $var2 = arg(4); //additional data like title, ect.
  $var3 = arg(5); //even more data like type

  if (isset($action)) {
    switch ($action) {
    //in: active nid, parent nid, new weight
    //action: reorganize nodes
    //out: node id,  node type,  icon to render
    case 'drag_drop':
      $nid = $var1;
      $parent_nid = $var2;
      $weight = $var3;
      //load the parent / active node
      $node = node_load($nid);
      $parent = node_load($parent_nid);
      //set parent
      $node->book['plid'] = $parent->book['mlid'];
      $node->book['weight'] = $weight;
      $node->revision = 1;
      $node->log = "Outline Designer -- nid:$nid parent nid changed to $parent_nid";
      node_save($node);
      print "Content position has been updated (nid:$nid)";
    break;
    //in: node id, weight
    //action: saved / updated node
    //out: message
    case 'reweight':
      $nid = $var1;
      $weight = $var2;
      $node = node_load($nid);
      //set parent / weight
      $node->book['weight'] = $weight;
      node_save($node);
      print "Content position has been updated (nid:$nid)";
    break;
    //in: nothing
    //action: rebuild the HTML of the table
    //out: AHAH tabledrag object
    case 'reload_table':
      $nid = $var1;
      module_load_include('inc', 'book', 'book.admin');
      //$form_state = array('storage' => '', 'submitted' => '', 'post' => array());
      $output = drupal_get_form('book_admin_edit', node_load($nid));
      drupal_json(array('status' => TRUE, 'data' => $output));
    break;
      //in: node title,  node parent id
      //action: Insert a node
      //out: parent menu id, and message / new nid
      case 'add_content':
        $title = $var1;
        $type = $var2;
        $parent_nid = $var3;
        $title = str_replace("@2@F@", '/', $title);
        //set the node
        $node->title = $title;
        $node->type = $type;
        $node->uid = $user->uid;
        //load up the parent of this new item and then copy over the book structure stuff
        $parent = node_load($parent_nid);
        $node->book['weight'] = -15;
        $node->book['plid'] = $parent->book['mlid'];
        $node->book['bid'] = $parent->book['bid'];
        $node->book['menu_name'] = $parent->book['menu_name'];
        $node->book['module'] = $parent->book['module'];
        node_save($node);
        watchdog('content', '@type: added %title.', array('@type' => $node->type, '%title' => $node->title));
        print $parent->book['mlid'] .';msg:'. $node->type .' added (nid:'. $node->nid .')';
      break;
      //in: node id,  title
      //action: rename a single node
      //out: nothing
      case 'rename':
        $nid = $var1;
        $newtitle = $var2;
        $newtitle = str_replace("@2@F@", '/', $newtitle);
        $node = node_load($nid);
        if ($user->uid == $node->uid && user_access(_outline_designer_get_pstr('edit own', $node->type))) {
          $node->log = "Outline Designer -- node renamed from ". $node->title ." to ". $newtitle;
          watchdog('content', "Outline Designer -- node renamed from ". $node->title ." to ". $newtitle);
          print "Content renamed from ". $node->title ." to ". $newtitle ."(nid:$nid)";
          $node->title = $newtitle;
          $node->revision = 1;
          node_save($node);
        }
        elseif (user_access(_outline_designer_get_pstr('edit any', $node->type))) {
          $node->log = "Outline Designer -- node renamed from ". $node->title ." to ". $newtitle;
          watchdog('content', "Outline Designer -- node renamed from ". $node->title ." to ". $newtitle);
          print "Content renamed from ". $node->title ." to ". $newtitle ."(nid:$nid)";
          $node->title = $newtitle;
          $node->revision = 1;
          node_save($node);
        }
        else {
          print 0;
        }
      break;
      //in: root node id
      //action: duplicate the node and associate the tree to the new branch (if multiple)
      //out: new root node
      case 'duplicate':
        $nid = $var1;
        $multiple = $var2;
        $dup_title = $var3;
        //only duplicate 1 item
        if ($multiple == 0) {
          $node = node_load($nid);
          $node->nid = NULL;
          $node->created = NULL;
          $node->uid = $user->uid;
          $new_title = str_replace('%title', $node->title, $dup_title);
          $node->title = $new_title;
          node_save($node);
          print 'Content duplicated (nid:'. $nid .')';
        }
        //snag the whole branch if multiple == 1
        else {
          $nids = $nid;
          $map = array();
          $node = node_load($nid);
          //pull only the nodes that have the original node as a parent
          $mlid = $node->book['mlid'];
          $result = db_query("
          SELECT link_path
          FROM {menu_links}
          WHERE p2='%s' OR p3='%s' OR p4='%s' OR p5='%s' OR p6='%s' OR p7='%s' OR p8='%s' OR p9='%s'
          ORDER BY depth ASC", $mlid, $mlid, $mlid, $mlid, $mlid, $mlid, $mlid, $mlid);
          while ($value = db_fetch_array($result)) {
            $dup_node = node_load(str_replace('node/', '', $value['link_path']));
            $nids .= ', '. $dup_node->nid;
            $old_nid = $dup_node->nid;
            $dup_node->nid = NULL;
            $dup_node->created = NULL;
            $dup_node->uid = $user->uid;
            $dup_node->revision = 1;
            $dup_node->title = str_replace('%title', $dup_node->title, $dup_title);
            $old_mlid = $dup_node->book['mlid'];
            $dup_node->book['mlid'] = NULL;
            $dup_node->log = "Outline Designer -- Duplicate of old node nid:$old_nid";
            if (isset($map[$dup_node->book['plid']]) ) {
              $dup_node->book['plid'] = $map[$dup_node->book['plid']];
            }
            node_save($dup_node);
            $map[$old_mlid] = $dup_node->book['mlid'];
          }
          print 'Content duplicated (nids:'. $nids .')';
        }
      break;
      //in: list of node ids to delete
      //action: delete nodes
      //out: completion response
      case 'delete':
        $nid = $var1;
        $multiple = $var2;
        $node = node_load($nid);
        if ($multiple == 0) {
          if ($user->uid == $node->uid && user_access(_outline_designer_get_pstr('delete own', $node->type))) {
            print "Content deleted (nid:$nid)";
            node_delete($nid);
          }
          elseif (user_access(_outline_designer_get_pstr('delete any', $node->type))) {
            print "Content deleted (nid:$nid)";
            node_delete($nid);
          }
          else {
            print 0;
          }
        }
        else {
          $node = node_load($nid);
          //pull only the nodes that have this node as a parent
          $mlid = $node->book['mlid'];
              $result = db_query("SELECT link_path FROM {menu_links} WHERE p1='%s' OR p2='%s' OR p3='%s' OR p4='%s' OR p5='%s' OR p6='%s' OR p7='%s' OR p8='%s' OR p9='%s'", $mlid, $mlid, $mlid, $mlid, $mlid, $mlid, $mlid, $mlid, $mlid);
          $del_count = 0;
          $count = 0;
          while ($value = db_fetch_array($result)) {
        $count++;
      $node = node_load(str_replace('node/', '', $value['link_path']));
        if ($user->uid == $node->uid && user_access(_outline_designer_get_pstr('delete own', $node->type))) {
          $del_count++;
              node_delete($node->nid);
        }
        elseif (user_access(_outline_designer_get_pstr('delete any', $node->type))) {
              $del_count++;
              node_delete($node->nid);
        }
      }
      if ($del_count == 0) {
        print 0;
      }
      elseif ($count != $del_count) {
        print "A multiple delete was commited but you didn't have the permissions to delete all content so some remain.";
      }
      else {
        print "All content deleted successfully.";
      }
    }
      break;
      //in: node id,  node type name
      //action: change node type and resave
      //out: icon to render
      case 'change_type':
        $nid = $var1;
        $new_type = $var2;
        $node = node_load($nid);
    if ($user->uid == $node->uid && user_access(_outline_designer_get_pstr('edit own', $node->type))) {
          $log_msg = " Content Type changed from '". $node->type ."' to '$new_type'";
          $node->log = "Outline Designer -- ". $log_msg;
          $node->type = $new_type;
          node_save($node);
          watchdog('content', "Outline Designer -- ". $log_msg);
      print $log_msg;
    }
    elseif (user_access(_outline_designer_get_pstr('edit any', $node->type))) {
      $log_msg = " Content Type changed from '". $node->type ."' to '$new_type'";
          $node->log = "Outline Designer -- ". $log_msg;
          $node->type = $new_type;
          node_save($node);
          watchdog('content', "Outline Designer -- ". $log_msg);
      print $log_msg;
    }
    else {
          print 0;
    }
      break;
    }
  }
  exit();
}

function _outline_designer_get_pstr($op,  $type) {
  $term = 'content';
  switch ($type) {
    // Panels are a totally special case
    case 'panel':
      if ($op == 'create') {
        return 'create panel-nodes';
      }
      elseif ($op == 'edit') {
        return 'administer panel-nodes';
      }
      elseif ($op == 'edit own') {
        return 'edit own panel-nodes';
      }
    break;
    default:
    break;
  }
  return ($op .' '. $type .' '. $term);
}

function _outline_designer_validate_image_resolution(&$file, $dimensions) {
  $errors = array();
  // Check first that the file is an image.
  if ($info = image_get_info($file->filepath)) {
    // Check if the icon matches the given dimensions.
    list($width, $height) = explode('x', $dimensions);
    if ($info['width'] != $width || $info['height'] != $height) {
      // Try to resize the image to fit the dimensions if it doesn't.
      if (image_get_toolkit() && image_scale_and_crop($file->filepath, $file->filepath, $width, $height)) {
        drupal_set_message(t('The image was resized to the allowed dimensions of %dimensions pixels.', array('%dimensions' => $dimensions)));
        // Clear the cached filesize and refresh the image information.
        clearstatcache();
        $info = image_get_info($file->filepath);
        $file->filesize = $info['file_size'];
      }
      else {
        $errors[] = t('Image dimensions need to be %dimensions pixels.', array('%dimensions' => $maximum_dimensions));
      }
    }
  }
  return $errors;
  }

function outline_designer_footer($main = 0) {
  if (arg(0) == 'admin' && arg(1) == 'content' && arg(2) == 'book' && arg(3) != '' && arg(3) != 'list' && arg(3) != 'settings' && arg(3) != 'outline_designer') {
  //Select only those that the book module say can be outlined
  $types_ary = variable_get('book_allowed_types', array('page'));
  //make sure the user can submit these types via permissions
  $result = db_query("SELECT type,name FROM {node_type} ORDER BY name");
  $typeoutput = '<table><tr>';
  $count = 0;
  while ($value = db_fetch_array($result)) {
    //ensure there is no permission escalation in type switching
    if (array_search($value['type'], $types_ary) === FALSE) {
    }
    elseif (user_access(_outline_designer_get_pstr('create', $value['type']))) {
      $count++;
      $typeoutput .= '<td><input type="radio" class="type_radio" name="content_type[]" value="'. $value['type'] .'"/> <img src="'. base_path() . variable_get("outline_designer_". $value['type'] ."_icon", drupal_get_path('module', 'outline_designer') ."/images/page.png") .'" />' . $value['name'] .'</td>';
      if ($count % 3 == 0) {
        $typeoutput .= '</tr><tr>';
      }
    }
  }
  $typeoutput .= '</tr></table>';
  return '
  <div id="od_popup_overlay"></div>
  <div id="od_popup">
    <div class="popup-statusbar"></div>
    <div class="popup-content"></div>
    <div class="popup-buttons"></div>
    <input type="button" name="Submit" value="Submit" class="od_submit_button" />
    <input type="button" name="Cancel" value="Cancel" class="od_cancel_button" />
    </div>
  </div>
  <div id="od_growl" align="center"></div>
<div id="od_popup_toolbox">
  <div id="od_duplicate" class="od_uiscreen">
    <label class="option" for="od_duplicate_multiple">
    <input type="checkbox" id="od_duplicate_multiple" /> Duplicate hierarchy
    </label>
    <br /><br />
    How should the new title be formed?
    <input type="textfield" id="od_duplicate_title" value="%title (Copy)" />
  </div>
  <div id="od_delete" class="od_uiscreen">
    <label class="option" for="od_delete_multiple">
    <input type="checkbox" id="od_delete_multiple" /> Delete hierarchy
     </label>
  </div>
  <div id="od_change_type" class="od_uiscreen">
  *Note: Changing content types can have undesirable effects, use with caution
  '. $typeoutput .'
  </div>
  <div id="od_add_content" class="od_uiscreen">
      <strong>Title: </strong>
      <input size="30" type="text" id="od_add_content_title" name="od_add_content_title">
      '. $typeoutput .'
  </div>
</div>';
  }
}